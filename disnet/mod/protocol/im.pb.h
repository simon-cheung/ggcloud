// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#ifndef PROTOBUF_im_2eproto__INCLUDED
#define PROTOBUF_im_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_im_2eproto();
void protobuf_AssignDesc_im_2eproto();
void protobuf_ShutdownFile_im_2eproto();

class user_register;
class user_register_resp;
class user_logon;
class user_search;
class user_search_result;
class media_inner;
class chat_send;
class chat_stream;

// ===================================================================

class user_register : public ::google::protobuf::Message {
 public:
  user_register();
  virtual ~user_register();
  
  user_register(const user_register& from);
  
  inline user_register& operator=(const user_register& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_register& default_instance();
  
  void Swap(user_register* other);
  
  // implements Message ----------------------------------------------
  
  user_register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_register& from);
  void MergeFrom(const user_register& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  
  // @@protoc_insertion_point(class_scope:user_register)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* pwd_;
  static const ::std::string _default_pwd_;
  friend void  protobuf_AddDesc_im_2eproto();
  friend void protobuf_AssignDesc_im_2eproto();
  friend void protobuf_ShutdownFile_im_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_register* default_instance_;
};
// -------------------------------------------------------------------

class user_register_resp : public ::google::protobuf::Message {
 public:
  user_register_resp();
  virtual ~user_register_resp();
  
  user_register_resp(const user_register_resp& from);
  
  inline user_register_resp& operator=(const user_register_resp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_register_resp& default_instance();
  
  void Swap(user_register_resp* other);
  
  // implements Message ----------------------------------------------
  
  user_register_resp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_register_resp& from);
  void MergeFrom(const user_register_resp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  
  // @@protoc_insertion_point(class_scope:user_register_resp)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* result_;
  static const ::std::string _default_result_;
  friend void  protobuf_AddDesc_im_2eproto();
  friend void protobuf_AssignDesc_im_2eproto();
  friend void protobuf_ShutdownFile_im_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_register_resp* default_instance_;
};
// -------------------------------------------------------------------

class user_logon : public ::google::protobuf::Message {
 public:
  user_logon();
  virtual ~user_logon();
  
  user_logon(const user_logon& from);
  
  inline user_logon& operator=(const user_logon& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_logon& default_instance();
  
  void Swap(user_logon* other);
  
  // implements Message ----------------------------------------------
  
  user_logon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_logon& from);
  void MergeFrom(const user_logon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  
  // optional string resource = 3;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 3;
  inline const ::std::string& resource() const;
  inline void set_resource(const ::std::string& value);
  inline void set_resource(const char* value);
  inline void set_resource(const char* value, size_t size);
  inline ::std::string* mutable_resource();
  
  // @@protoc_insertion_point(class_scope:user_logon)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* pwd_;
  static const ::std::string _default_pwd_;
  ::std::string* resource_;
  static const ::std::string _default_resource_;
  friend void  protobuf_AddDesc_im_2eproto();
  friend void protobuf_AssignDesc_im_2eproto();
  friend void protobuf_ShutdownFile_im_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_logon* default_instance_;
};
// -------------------------------------------------------------------

class user_search : public ::google::protobuf::Message {
 public:
  user_search();
  virtual ~user_search();
  
  user_search(const user_search& from);
  
  inline user_search& operator=(const user_search& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_search& default_instance();
  
  void Swap(user_search* other);
  
  // implements Message ----------------------------------------------
  
  user_search* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_search& from);
  void MergeFrom(const user_search& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string desc = 1;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 1;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  
  // @@protoc_insertion_point(class_scope:user_search)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* desc_;
  static const ::std::string _default_desc_;
  friend void  protobuf_AddDesc_im_2eproto();
  friend void protobuf_AssignDesc_im_2eproto();
  friend void protobuf_ShutdownFile_im_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_search* default_instance_;
};
// -------------------------------------------------------------------

class user_search_result : public ::google::protobuf::Message {
 public:
  user_search_result();
  virtual ~user_search_result();
  
  user_search_result(const user_search_result& from);
  
  inline user_search_result& operator=(const user_search_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_search_result& default_instance();
  
  void Swap(user_search_result* other);
  
  // implements Message ----------------------------------------------
  
  user_search_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_search_result& from);
  void MergeFrom(const user_search_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string user_lst = 1;
  inline int user_lst_size() const;
  inline void clear_user_lst();
  static const int kUserLstFieldNumber = 1;
  inline const ::std::string& user_lst(int index) const;
  inline ::std::string* mutable_user_lst(int index);
  inline void set_user_lst(int index, const ::std::string& value);
  inline void set_user_lst(int index, const char* value);
  inline void set_user_lst(int index, const char* value, size_t size);
  inline ::std::string* add_user_lst();
  inline void add_user_lst(const ::std::string& value);
  inline void add_user_lst(const char* value);
  inline void add_user_lst(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_lst();
  
  // @@protoc_insertion_point(class_scope:user_search_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> user_lst_;
  friend void  protobuf_AddDesc_im_2eproto();
  friend void protobuf_AssignDesc_im_2eproto();
  friend void protobuf_ShutdownFile_im_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_search_result* default_instance_;
};
// -------------------------------------------------------------------

class media_inner : public ::google::protobuf::Message {
 public:
  media_inner();
  virtual ~media_inner();
  
  media_inner(const media_inner& from);
  
  inline media_inner& operator=(const media_inner& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const media_inner& default_instance();
  
  void Swap(media_inner* other);
  
  // implements Message ----------------------------------------------
  
  media_inner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const media_inner& from);
  void MergeFrom(const media_inner& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string type = 4;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type(int index) const;
  inline ::std::string* mutable_type(int index);
  inline void set_type(int index, const ::std::string& value);
  inline void set_type(int index, const char* value);
  inline void set_type(int index, const char* value, size_t size);
  inline ::std::string* add_type();
  inline void add_type(const ::std::string& value);
  inline void add_type(const char* value);
  inline void add_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();
  
  // repeated string data = 5;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data(int index) const;
  inline ::std::string* mutable_data(int index);
  inline void set_data(int index, const ::std::string& value);
  inline void set_data(int index, const char* value);
  inline void set_data(int index, const char* value, size_t size);
  inline ::std::string* add_data();
  inline void add_data(const ::std::string& value);
  inline void add_data(const char* value);
  inline void add_data(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();
  
  // @@protoc_insertion_point(class_scope:media_inner)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  friend void  protobuf_AddDesc_im_2eproto();
  friend void protobuf_AssignDesc_im_2eproto();
  friend void protobuf_ShutdownFile_im_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static media_inner* default_instance_;
};
// -------------------------------------------------------------------

class chat_send : public ::google::protobuf::Message {
 public:
  chat_send();
  virtual ~chat_send();
  
  chat_send(const chat_send& from);
  
  inline chat_send& operator=(const chat_send& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_send& default_instance();
  
  void Swap(chat_send* other);
  
  // implements Message ----------------------------------------------
  
  chat_send* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_send& from);
  void MergeFrom(const chat_send& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  
  // required string to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  
  // required string txt = 3;
  inline bool has_txt() const;
  inline void clear_txt();
  static const int kTxtFieldNumber = 3;
  inline const ::std::string& txt() const;
  inline void set_txt(const ::std::string& value);
  inline void set_txt(const char* value);
  inline void set_txt(const char* value, size_t size);
  inline ::std::string* mutable_txt();
  
  // repeated .media_inner con = 4;
  inline int con_size() const;
  inline void clear_con();
  static const int kConFieldNumber = 4;
  inline const ::media_inner& con(int index) const;
  inline ::media_inner* mutable_con(int index);
  inline ::media_inner* add_con();
  inline const ::google::protobuf::RepeatedPtrField< ::media_inner >&
      con() const;
  inline ::google::protobuf::RepeatedPtrField< ::media_inner >*
      mutable_con();
  
  // @@protoc_insertion_point(class_scope:chat_send)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* from_;
  static const ::std::string _default_from_;
  ::std::string* to_;
  static const ::std::string _default_to_;
  ::std::string* txt_;
  static const ::std::string _default_txt_;
  ::google::protobuf::RepeatedPtrField< ::media_inner > con_;
  friend void  protobuf_AddDesc_im_2eproto();
  friend void protobuf_AssignDesc_im_2eproto();
  friend void protobuf_ShutdownFile_im_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static chat_send* default_instance_;
};
// -------------------------------------------------------------------

class chat_stream : public ::google::protobuf::Message {
 public:
  chat_stream();
  virtual ~chat_stream();
  
  chat_stream(const chat_stream& from);
  
  inline chat_stream& operator=(const chat_stream& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_stream& default_instance();
  
  void Swap(chat_stream* other);
  
  // implements Message ----------------------------------------------
  
  chat_stream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_stream& from);
  void MergeFrom(const chat_stream& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  
  // required string to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  
  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  
  // required string desc = 4;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 4;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  
  // @@protoc_insertion_point(class_scope:chat_stream)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* from_;
  static const ::std::string _default_from_;
  ::std::string* to_;
  static const ::std::string _default_to_;
  ::std::string* type_;
  static const ::std::string _default_type_;
  ::std::string* desc_;
  static const ::std::string _default_desc_;
  friend void  protobuf_AddDesc_im_2eproto();
  friend void protobuf_AssignDesc_im_2eproto();
  friend void protobuf_ShutdownFile_im_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static chat_stream* default_instance_;
};
// ===================================================================


// ===================================================================

// user_register

// required string name = 1;
inline bool user_register::has_name() const {
  return _has_bit(0);
}
inline void user_register::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_register::name() const {
  return *name_;
}
inline void user_register::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_register::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_register::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_register::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string pwd = 2;
inline bool user_register::has_pwd() const {
  return _has_bit(1);
}
inline void user_register::clear_pwd() {
  if (pwd_ != &_default_pwd_) {
    pwd_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_register::pwd() const {
  return *pwd_;
}
inline void user_register::set_pwd(const ::std::string& value) {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void user_register::set_pwd(const char* value) {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void user_register::set_pwd(const char* value, size_t size) {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_register::mutable_pwd() {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}

// -------------------------------------------------------------------

// user_register_resp

// required string result = 1;
inline bool user_register_resp::has_result() const {
  return _has_bit(0);
}
inline void user_register_resp::clear_result() {
  if (result_ != &_default_result_) {
    result_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_register_resp::result() const {
  return *result_;
}
inline void user_register_resp::set_result(const ::std::string& value) {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void user_register_resp::set_result(const char* value) {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void user_register_resp::set_result(const char* value, size_t size) {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_register_resp::mutable_result() {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  return result_;
}

// -------------------------------------------------------------------

// user_logon

// required string name = 1;
inline bool user_logon::has_name() const {
  return _has_bit(0);
}
inline void user_logon::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_logon::name() const {
  return *name_;
}
inline void user_logon::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_logon::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_logon::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_logon::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string pwd = 2;
inline bool user_logon::has_pwd() const {
  return _has_bit(1);
}
inline void user_logon::clear_pwd() {
  if (pwd_ != &_default_pwd_) {
    pwd_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_logon::pwd() const {
  return *pwd_;
}
inline void user_logon::set_pwd(const ::std::string& value) {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void user_logon::set_pwd(const char* value) {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void user_logon::set_pwd(const char* value, size_t size) {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_logon::mutable_pwd() {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}

// optional string resource = 3;
inline bool user_logon::has_resource() const {
  return _has_bit(2);
}
inline void user_logon::clear_resource() {
  if (resource_ != &_default_resource_) {
    resource_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& user_logon::resource() const {
  return *resource_;
}
inline void user_logon::set_resource(const ::std::string& value) {
  _set_bit(2);
  if (resource_ == &_default_resource_) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
}
inline void user_logon::set_resource(const char* value) {
  _set_bit(2);
  if (resource_ == &_default_resource_) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
}
inline void user_logon::set_resource(const char* value, size_t size) {
  _set_bit(2);
  if (resource_ == &_default_resource_) {
    resource_ = new ::std::string;
  }
  resource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_logon::mutable_resource() {
  _set_bit(2);
  if (resource_ == &_default_resource_) {
    resource_ = new ::std::string;
  }
  return resource_;
}

// -------------------------------------------------------------------

// user_search

// required string desc = 1;
inline bool user_search::has_desc() const {
  return _has_bit(0);
}
inline void user_search::clear_desc() {
  if (desc_ != &_default_desc_) {
    desc_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_search::desc() const {
  return *desc_;
}
inline void user_search::set_desc(const ::std::string& value) {
  _set_bit(0);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void user_search::set_desc(const char* value) {
  _set_bit(0);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void user_search::set_desc(const char* value, size_t size) {
  _set_bit(0);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_search::mutable_desc() {
  _set_bit(0);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  return desc_;
}

// -------------------------------------------------------------------

// user_search_result

// repeated string user_lst = 1;
inline int user_search_result::user_lst_size() const {
  return user_lst_.size();
}
inline void user_search_result::clear_user_lst() {
  user_lst_.Clear();
}
inline const ::std::string& user_search_result::user_lst(int index) const {
  return user_lst_.Get(index);
}
inline ::std::string* user_search_result::mutable_user_lst(int index) {
  return user_lst_.Mutable(index);
}
inline void user_search_result::set_user_lst(int index, const ::std::string& value) {
  user_lst_.Mutable(index)->assign(value);
}
inline void user_search_result::set_user_lst(int index, const char* value) {
  user_lst_.Mutable(index)->assign(value);
}
inline void user_search_result::set_user_lst(int index, const char* value, size_t size) {
  user_lst_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_search_result::add_user_lst() {
  return user_lst_.Add();
}
inline void user_search_result::add_user_lst(const ::std::string& value) {
  user_lst_.Add()->assign(value);
}
inline void user_search_result::add_user_lst(const char* value) {
  user_lst_.Add()->assign(value);
}
inline void user_search_result::add_user_lst(const char* value, size_t size) {
  user_lst_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
user_search_result::user_lst() const {
  return user_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
user_search_result::mutable_user_lst() {
  return &user_lst_;
}

// -------------------------------------------------------------------

// media_inner

// repeated string type = 4;
inline int media_inner::type_size() const {
  return type_.size();
}
inline void media_inner::clear_type() {
  type_.Clear();
}
inline const ::std::string& media_inner::type(int index) const {
  return type_.Get(index);
}
inline ::std::string* media_inner::mutable_type(int index) {
  return type_.Mutable(index);
}
inline void media_inner::set_type(int index, const ::std::string& value) {
  type_.Mutable(index)->assign(value);
}
inline void media_inner::set_type(int index, const char* value) {
  type_.Mutable(index)->assign(value);
}
inline void media_inner::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* media_inner::add_type() {
  return type_.Add();
}
inline void media_inner::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
}
inline void media_inner::add_type(const char* value) {
  type_.Add()->assign(value);
}
inline void media_inner::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
media_inner::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
media_inner::mutable_type() {
  return &type_;
}

// repeated string data = 5;
inline int media_inner::data_size() const {
  return data_.size();
}
inline void media_inner::clear_data() {
  data_.Clear();
}
inline const ::std::string& media_inner::data(int index) const {
  return data_.Get(index);
}
inline ::std::string* media_inner::mutable_data(int index) {
  return data_.Mutable(index);
}
inline void media_inner::set_data(int index, const ::std::string& value) {
  data_.Mutable(index)->assign(value);
}
inline void media_inner::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
}
inline void media_inner::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* media_inner::add_data() {
  return data_.Add();
}
inline void media_inner::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
}
inline void media_inner::add_data(const char* value) {
  data_.Add()->assign(value);
}
inline void media_inner::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
media_inner::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
media_inner::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// chat_send

// required string from = 1;
inline bool chat_send::has_from() const {
  return _has_bit(0);
}
inline void chat_send::clear_from() {
  if (from_ != &_default_from_) {
    from_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& chat_send::from() const {
  return *from_;
}
inline void chat_send::set_from(const ::std::string& value) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void chat_send::set_from(const char* value) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void chat_send::set_from(const char* value, size_t size) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_send::mutable_from() {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  return from_;
}

// required string to = 2;
inline bool chat_send::has_to() const {
  return _has_bit(1);
}
inline void chat_send::clear_to() {
  if (to_ != &_default_to_) {
    to_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& chat_send::to() const {
  return *to_;
}
inline void chat_send::set_to(const ::std::string& value) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void chat_send::set_to(const char* value) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void chat_send::set_to(const char* value, size_t size) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_send::mutable_to() {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  return to_;
}

// required string txt = 3;
inline bool chat_send::has_txt() const {
  return _has_bit(2);
}
inline void chat_send::clear_txt() {
  if (txt_ != &_default_txt_) {
    txt_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& chat_send::txt() const {
  return *txt_;
}
inline void chat_send::set_txt(const ::std::string& value) {
  _set_bit(2);
  if (txt_ == &_default_txt_) {
    txt_ = new ::std::string;
  }
  txt_->assign(value);
}
inline void chat_send::set_txt(const char* value) {
  _set_bit(2);
  if (txt_ == &_default_txt_) {
    txt_ = new ::std::string;
  }
  txt_->assign(value);
}
inline void chat_send::set_txt(const char* value, size_t size) {
  _set_bit(2);
  if (txt_ == &_default_txt_) {
    txt_ = new ::std::string;
  }
  txt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_send::mutable_txt() {
  _set_bit(2);
  if (txt_ == &_default_txt_) {
    txt_ = new ::std::string;
  }
  return txt_;
}

// repeated .media_inner con = 4;
inline int chat_send::con_size() const {
  return con_.size();
}
inline void chat_send::clear_con() {
  con_.Clear();
}
inline const ::media_inner& chat_send::con(int index) const {
  return con_.Get(index);
}
inline ::media_inner* chat_send::mutable_con(int index) {
  return con_.Mutable(index);
}
inline ::media_inner* chat_send::add_con() {
  return con_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::media_inner >&
chat_send::con() const {
  return con_;
}
inline ::google::protobuf::RepeatedPtrField< ::media_inner >*
chat_send::mutable_con() {
  return &con_;
}

// -------------------------------------------------------------------

// chat_stream

// required string from = 1;
inline bool chat_stream::has_from() const {
  return _has_bit(0);
}
inline void chat_stream::clear_from() {
  if (from_ != &_default_from_) {
    from_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& chat_stream::from() const {
  return *from_;
}
inline void chat_stream::set_from(const ::std::string& value) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void chat_stream::set_from(const char* value) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void chat_stream::set_from(const char* value, size_t size) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_stream::mutable_from() {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  return from_;
}

// required string to = 2;
inline bool chat_stream::has_to() const {
  return _has_bit(1);
}
inline void chat_stream::clear_to() {
  if (to_ != &_default_to_) {
    to_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& chat_stream::to() const {
  return *to_;
}
inline void chat_stream::set_to(const ::std::string& value) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void chat_stream::set_to(const char* value) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void chat_stream::set_to(const char* value, size_t size) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_stream::mutable_to() {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  return to_;
}

// required string type = 3;
inline bool chat_stream::has_type() const {
  return _has_bit(2);
}
inline void chat_stream::clear_type() {
  if (type_ != &_default_type_) {
    type_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& chat_stream::type() const {
  return *type_;
}
inline void chat_stream::set_type(const ::std::string& value) {
  _set_bit(2);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void chat_stream::set_type(const char* value) {
  _set_bit(2);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void chat_stream::set_type(const char* value, size_t size) {
  _set_bit(2);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_stream::mutable_type() {
  _set_bit(2);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  return type_;
}

// required string desc = 4;
inline bool chat_stream::has_desc() const {
  return _has_bit(3);
}
inline void chat_stream::clear_desc() {
  if (desc_ != &_default_desc_) {
    desc_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& chat_stream::desc() const {
  return *desc_;
}
inline void chat_stream::set_desc(const ::std::string& value) {
  _set_bit(3);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void chat_stream::set_desc(const char* value) {
  _set_bit(3);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void chat_stream::set_desc(const char* value, size_t size) {
  _set_bit(3);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_stream::mutable_desc() {
  _set_bit(3);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  return desc_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_im_2eproto__INCLUDED
